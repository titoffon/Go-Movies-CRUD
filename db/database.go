package db

import (
	"log"
	"main/models"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

// DB — глобальная переменная для работы с базой данных
var DB *gorm.DB // Создается указатель на объект структуры grom.DB, что открывает возможность пользоваться методами gorm.DB
/*соединение с базой данных инкапсулируется, это означает, что детали реализации и управления соединением скрыты внутри
объекта или структуры, и предоставляется только интерфейс для взаимодействия с ним*/

// InitDB инициализирует подключение к базе данных
func InitDB() {
	dsn := "host=192.168.0.141 user=vitalii password=20080105 dbname=moviedb port=5432 sslmode=disable"
	var err error
	DB, err = gorm.Open(postgres.Open(dsn), &gorm.Config{}) //открывается соединение с БД
	/*gorm.Open принимает на вход два аргумента
	1) драйверы БД, которые являются по сути интерфейсом,
	определяющим, как GORM будет взаимодйствовать с БД
	2)Конфигурация GORM: Это указатель на структуру gorm.Config, которая позволяет настроить поведение GORM.
	Если передать nil или пустую структуру, будут использованы настройки по умолчанию.*/

	if err != nil {
		log.Fatal("Не удалось подключиться к базе данных: ", err)
	}
	log.Println("Подключение к базе данных успешно")
	autoMigrate()
}

// autoMigrate автоматически создает таблицы на основе моделей
func autoMigrate() {
	DB.AutoMigrate(&models.Movie{}, &models.Director{}, &models.User{}) // AutoMigrate анализирует модели структур и на основе них создаёт или обновляет таблицы
}
